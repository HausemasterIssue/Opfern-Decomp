//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\u1\Documents\Java Decompiler\1.12 stable mappings"!

//Decompiled by Procyon!

package me.zeroeightsix.kami.module.modules.exploit;

import me.zeroeightsix.kami.module.*;
import me.zero.alpine.listener.*;
import me.zeroeightsix.kami.event.events.*;
import me.zeroeightsix.kami.setting.*;
import java.util.function.*;
import net.minecraft.util.math.*;
import net.minecraft.world.*;
import net.minecraft.block.state.*;
import net.minecraft.block.*;
import net.minecraft.util.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.*;

@Module.Info(name = "PacketMine", category = Module.Category.EXPLOIT)
public class PacketMine extends Module
{
    private Setting<Boolean> reset;
    private Setting<Boolean> doubleBreak;
    @EventHandler
    private Listener<EventPlayerResetBlockRemoving> ResetBlock;
    @EventHandler
    private Listener<EventPlayerClickBlock> ClickBlock;
    @EventHandler
    private Listener<DamageBlockEvent> OnDamageBlock;
    
    public PacketMine() {
        this.reset = (Setting<Boolean>)this.register((Setting)Settings.b("Reset", false));
        this.doubleBreak = (Setting<Boolean>)this.register((Setting)Settings.b("Double Break", false));
        this.ResetBlock = (Listener<EventPlayerResetBlockRemoving>)new Listener(p_Event -> {
            if (this.reset.getValue()) {
                p_Event.cancel();
            }
        }, new Predicate[0]);
        this.ClickBlock = (Listener<EventPlayerClickBlock>)new Listener(p_Event -> {
            if (this.reset.getValue() && PacketMine.mc.playerController.curBlockDamageMP > 0.1f) {
                PacketMine.mc.playerController.isHittingBlock = true;
            }
        }, new Predicate[0]);
        this.OnDamageBlock = (Listener<DamageBlockEvent>)new Listener(p_Event -> {
            if (this.canBreak(p_Event.getPos())) {
                if (this.reset.getValue()) {
                    PacketMine.mc.playerController.isHittingBlock = false;
                }
                PacketMine.mc.player.swingArm(EnumHand.MAIN_HAND);
                PacketMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, p_Event.getPos(), p_Event.getDirection()));
                PacketMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, p_Event.getPos(), p_Event.getDirection()));
                p_Event.cancel();
            }
            if (this.doubleBreak.getValue()) {
                final BlockPos above = p_Event.getPos().add(0, 1, 0);
                if (this.canBreak(above) && PacketMine.mc.player.getDistance((double)above.getX(), (double)above.getY(), (double)above.getZ()) <= 5.0) {
                    PacketMine.mc.player.swingArm(EnumHand.MAIN_HAND);
                    PacketMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, above, p_Event.getDirection()));
                    PacketMine.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, above, p_Event.getDirection()));
                    PacketMine.mc.playerController.onPlayerDestroyBlock(above);
                    PacketMine.mc.world.setBlockToAir(above);
                }
            }
        }, new Predicate[0]);
    }
    
    public void onUpdate() {
        PacketMine.mc.playerController.blockHitDelay = 0;
        if (this.reset.getValue() && PacketMine.mc.gameSettings.keyBindUseItem.isKeyDown()) {
            PacketMine.mc.playerController.isHittingBlock = false;
        }
    }
    
    private boolean canBreak(final BlockPos pos) {
        final IBlockState blockState = PacketMine.mc.world.getBlockState(pos);
        final Block block = blockState.getBlock();
        return block.getBlockHardness(blockState, (World)PacketMine.mc.world, pos) != -1.0f;
    }
}
